generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =========================================================
// ENUMS
// =========================================================

// REQ-N2, REQ-N5: Control de Roles y Accesos, Gestión de Roles de Usuario
enum Role {
  Admin // Acceso total, gestión de productos, configuración de chatbot
  Client // Interacción con tienda, carrito, pagos, chatbot (solo info)
  Auditor // Posible rol para visualizar reportes y logs (no se mencionó explícitamente, pero es buena práctica)
}

// REQ-N1: Gestión de Inventario - Estado del producto
enum ProductStatus {
  Available    @map("Available")    // Producto con stock > 0
  Out_of_Stock @map("Out of Stock") // Producto con stock = 0
  Discontinued  @map("Discontinued")
}

// REQ-N3: Transacciones de Pago - Estado de la transacción
enum PaymentStatus {
  Pending   // Pago iniciado, esperando confirmación (dentro de los 15 minutos)
  Confirmed // Pago exitoso
  Cancelled // Pago cancelado o no confirmado a tiempo
  Refunded  // Pago reembolsado
}

// Estado de una orden
enum OrderStatus {
  Pending   // Orden creada, pago pendiente
  Processing // Pago confirmado, orden en preparación
  Shipped   // Orden enviada
  Delivered // Orden entregada
  Cancelled // Orden cancelada
}

// =========================================================
// MODELS
// =========================================================

// REQ-N7: Validación de Usuario - Modelo de Usuario
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique // REQ-N7: El correo debe ser único para el registro
  password  String   // Se almacenará como hash
  fullName  String   @map("full_name") // Pantalla de Registro de Cliente: nombre completo
  address   String   // Pantalla de Registro de Cliente: dirección
  phone     String? // Opcional: Para contacto, envíos.
  role      Role     @default(Client) // REQ-N2: Control de Roles y Accesos, REQ-N5: Gestión de Roles de Usuario
  isActive  Boolean  @default(true) // Para habilitar/deshabilitar usuarios
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones con otras tablas
  carts       Cart[]    // Un usuario puede tener varios carritos (ej. si se abandona uno)
  orders      Order[]   // Un usuario puede tener varias órdenes
  payments    Payment[] // Un usuario puede tener varios pagos
  // Logs de auditoría de acciones del usuario (REQ-N8)
  auditLogs   AuditLog[]

  @@map("users") // Mapeo al nombre de la tabla en la base de datos
}

// REQ-N1: Gestión de Inventario - Modelo de Producto
model Product {
  id          Int           @id @default(autoincrement())
  name        String        @unique // Nombre único del producto
  description String?       @db.Text // Descripción opcional, tipo TEXT para textos largos
  price       Decimal       @db.Decimal(10, 2) // Precio con 2 decimales
  stock       Int           @default(0) // REQ-N1: Cantidad de unidades en inventario. No puede ser < 1 al crear o actualizar.
  status      ProductStatus @default(Available) // REQ-N1: 'Available' o 'Out of Stock'
  imageUrl    String?       @map("image_url") // URL de la imagen del producto
  category    String?       // Categoría para filtros (Pantalla de Productos)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relaciones
  cartItems  CartItem[]  // Un producto puede estar en varios ítems de carrito
  orderItems OrderItem[] // Un producto puede estar en varios ítems de orden

  @@index([name]) // Añadir índice para búsquedas por nombre (rendimiento)
  @@map("products")
}

// Representa el carrito de compras de un cliente
// REQ-N3: Transacciones de Pago (el carrito se resetea)
// Pantalla de Carrito de Compras
model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique // Un usuario puede tener solo un carrito "activo"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[] // Productos dentro de este carrito

  @@map("carts")
}

// Ítems individuales dentro del carrito de compras
// REQ-N4: Control de Inventario por Usuario (límite de 10 unidades)
model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1) // REQ-N4: Cantidad del producto en el carrito. Max 10.
  price     Decimal  @db.Decimal(10, 2) // Precio del producto en el momento de añadirlo al carrito (para historial)

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId]) // Un producto solo puede estar una vez en un carrito
  @@map("cart_items")
}

// REQ-N6: Registro de Compras - Modelo de Orden
model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  totalAmount   Decimal     @db.Decimal(10, 2)
  orderStatus   OrderStatus @default(Pending)
  shippingAddress String      @map("shipping_address")
  paymentId     Int?        @unique // Clave foránea en Order para Payment
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user          User        @relation(fields: [userId], references: [id])
  // Aquí definimos la relación. El campo 'paymentId' es la clave foránea en este modelo (Order).
  // No necesitamos 'references' ni 'fields' en el otro lado de la relación (en Payment).
  payment       Payment?    @relation(fields: [paymentId], references: [id])

  items         OrderItem[]

  @@map("orders")
}

// Ítems individuales dentro de una orden
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int      @default(1)
  price Decimal  @db.Decimal(10, 2) // Precio unitario en el momento de la compra (para historial)

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([orderId, productId]) // Un producto solo puede estar una vez en una orden
  @@map("order_items")
}

// REQ-N3: Transacciones de Pago - Modelo de Pago
// REQ-N6: Registro de Compras (generar recibo después de confirmación de pago)
model Payment {
  id            Int           @id @default(autoincrement())
  userId        Int
  orderId       Int?          @unique // Clave foránea en Payment para Order (si existe una relación 1:1 donde Payment puede no tener Order)
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod String        @map("payment_method")
  transactionId String        @unique @map("transaction_id")
  paymentStatus PaymentStatus @default(Pending)
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user          User          @relation(fields: [userId], references: [id])
  // En este lado de la relación, solo indicamos el campo de relación inverso.
  // Prisma infiere automáticamente que 'order' se relaciona con la clave primaria de 'Order'.
  // Si Payment es el "lado propietario" de la relación con Order, es aquí donde se definirían 'fields' y 'references'.
  // Pero dado tu diseño con paymentId @unique en Order, Order es el propietario.
  order         Order? // El campo 'order' se usa para acceder a la Order asociada.

  @@map("payments")
}

// OR-006: Requerimientos de Auditoría
model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?     // Quién realizó la acción (opcional, si es una acción del sistema)
  action    String   @db.VarChar(255) // Descripción de la acción (ej. "LOGIN", "PRODUCT_UPDATED", "PAYMENT_CONFIRMED")
  entity    String?  @db.VarChar(255) // Entidad afectada (ej. "User", "Product", "Order")
  entityId  Int?     // ID de la entidad afectada
  details   Json?    // Detalles adicionales en formato JSON (ej. cambios en campos)
  ipAddress String?  @map("ip_address") // Dirección IP desde donde se realizó la acción
  timestamp DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

